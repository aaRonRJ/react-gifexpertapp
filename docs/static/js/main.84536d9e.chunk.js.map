{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","placeholder","onChange","target","getGifs","category","a","urlRequest","encodeURI","fetch","response","json","data","map","gif","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","loading","GifGrid","state","setState","useEffect","then","useFetchGifs","image","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAYhD,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,YAAY,kBACZC,SAAU,SAACR,GAAD,OAAWF,EAAcE,EAAMS,OAAOH,Y,uBCrB3CI,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACfC,EADe,iDACwCC,UAC3DH,GAFmB,+DAIEI,MAAMF,GAJR,cAIfG,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KALa,kBAOdA,EAAKC,KAAI,SAACC,GAAS,IAAD,EACvB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,SAXjB,2CAAH,sDCEPG,EAAc,SAAC,GAAuB,EAArBL,GAAsB,IAAlBE,EAAiB,EAAjBA,IAAKD,EAAY,EAAZA,MACrC,OACE,yBAAKK,UAAU,0CACb,yBAAKC,IAAKL,EAAKM,IAAKP,EAAOQ,QAAQ,SACnC,2BAAIR,KCAGS,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNY,SAAS,IAH6B,mBACjCE,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACX,GAAD,OACrBS,EAAS,CACPf,KAAMM,EACNM,SAAS,SAGZ,CAACnB,IAEGqB,EDX2BI,CAAazB,GAAvCmB,EAD+B,EAC/BA,QAAeN,EADgB,EACtBN,KAEjB,OACE,oCACE,wBAAIS,UAAU,qCAAqChB,GAClDmB,GACC,uBAAGH,UAAU,oCAAb,cAEF,yBAAKA,UAAU,aACZH,GACCA,EAAOrB,OAAS,GAChBqB,EAAOL,KAAI,SAACkB,GAAD,OAAW,kBAAC,EAAD,eAAaC,IAAKD,EAAMhB,IAAQgB,UEZnDE,EAAe,WAAO,IAAD,EACI3C,mBAAS,CAAC,cADd,mBACzBQ,EADyB,KACbT,EADa,KAUhC,OACE,6BACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACCS,EAAWe,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,S,MCf1C6B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.84536d9e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\"); // Input clear.\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        placeholder=\"Add category...\"\n        onChange={(event) => setInputValue(event.target.value)}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const urlRequest = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=TqtAC4ANhz1No7BYrjYFhpq6PudFFQ8s`;\n  const response = await fetch(urlRequest);\n  const { data } = await response.json();\n\n  return data.map((gif) => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.downsized_medium.url,\n    };\n  });\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, url, title }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} loading=\"lazy\" />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\n// Components.\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { loading, data: images } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Loading...</p>\n      )}\n      <div className=\"card-grid\">\n        {images &&\n          images.length > 0 &&\n          images.map((image) => <GifGridItem key={image.id} {...image} />)}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((images) =>\n      setState({\n        data: images,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\n\n// Components.\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  //   const handleAdd = () => {\n  //     // TODO: Cualquier opciÃ³n vale.\n  //     //   setCategories(categories.concat([\"Gangs of London\"]));\n  //     // setCategories([...categories, \"Gangs of London\"]);\n  //     setCategories((categories) => [...categories, \"Gangs of London\"]);\n  //   };\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      {categories.map((category) => (\n        <GifGrid key={category} category={category} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}